@page "/searchpage"
@using Microsoft.AspNetCore.WebUtilities
@using System
@using System.Linq
@using System.Collections.Generic;
@inject NavigationManager NavManager
@inject SearchMode SearchMode

<PageTitle>Searches</PageTitle>

<body>
    <Searchbar 
        searchMode="@SearchModeEnum.ByRecipe"
    />
    <div style="margin-bottom: 100px;">
        @foreach(var recipe in recipeResults)
        {
            <RecipeImageHorizontal 
                Index=@matchedRecipesIndexes[recipe]
                Image =@recipe.imagePath
                Difficulty =@recipe.Difficulty
                SpicyLevel =@recipe.Spicy
                Calories =@recipe.CaloriesPerServing
                Name =@recipe.Name
                Time =@recipe.Time/>
        }
    </div>
</body>

@code{
    private string? _name;
    public CookingInstructor.RecipeNS.Recipe[]? list = Index.staticlist;
    private CookingInstructor.RecipeNS.Recipe? current;

    public List<CookingInstructor.RecipeNS.Recipe> recipeResults = new List<CookingInstructor.RecipeNS.Recipe>();
    private Dictionary<CookingInstructor.RecipeNS.Recipe?, int> matchedRecipesIndexes = new Dictionary<CookingInstructor.RecipeNS.Recipe?, int>();

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("name", out var name))
        {
            _name = name;
        }
        GetRecipeResults();
    }

    public void GetRecipeResults()
    {
        recipeResults = new List<CookingInstructor.RecipeNS.Recipe>();
        if(SearchMode.state == SearchModeEnum.ByRecipe)
        {
            for (int i = 0; i < list.Length; i++)
            {
                if (list[i].Name.ToUpper().Contains(_name.ToUpper()))
                {
                    recipeResults.Add(list[i]);
                    matchedRecipesIndexes[list[i]] = i;
                }
            }
        }
        else
        {
            Dictionary<CookingInstructor.RecipeNS.Recipe, int> matchedRecipesCounts = new Dictionary<CookingInstructor.RecipeNS.Recipe, int>();
            
            for (int i = 0; i < list.Length; i++)
            {
                int count = 0;
                string[] ingredients = _name.Split(',');
                string[] recipeIngrList = new string[list[i].IngredientList.Length];
                
                for (int k = 0; k < list[i].IngredientList.Length; k++)
                {
                    recipeIngrList[k] = list[i].IngredientList[k].Name;
                }

                for (int j = 0; j < ingredients.Length; j++)
                {
                    if (recipeIngrList.Contains(ingredients[j], StringComparer.OrdinalIgnoreCase))
                    {
                        count += 1;
                        matchedRecipesCounts[list[i]] = count;
                        matchedRecipesIndexes[list[i]] = i;
                    }
                }
            }

            matchedRecipesCounts = matchedRecipesCounts.OrderByDescending(key => key.Value).ToDictionary(k => k.Key, v => v.Value);
            foreach (var entry in matchedRecipesCounts)
            {
                Console.WriteLine(entry.Key.Name + ": " + entry.Value);
            }

            recipeResults = new List<CookingInstructor.RecipeNS.Recipe>(matchedRecipesCounts.Keys);
        }
    }
}